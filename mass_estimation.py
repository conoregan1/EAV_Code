import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

from text_to_excel import process_data_file  # Import the process_data_file function
from crash_detection import normalize_acceleration  # Import the normalize_acceleration function

# Constants
MOTOR_FORCE = 500.0  # Constant force from the motor (in Newtons)
ROLLING_RESISTANCE_COEFFICIENT = 0.02  # Coefficient of rolling resistance
GRAVITY = 9.81  # Acceleration due to gravity (m/sÂ²)

def estimate_mass(df):
    """
    Estimate the mass of the vehicle using the normalized acceleration data and incline angles.
    """
    # Calculate the magnitude of the normalized acceleration
    df['accel_magnitude'] = np.sqrt(df['x-axis_norm']**2 + df['y-axis_norm']**2 + df['z-axis_norm']**2)

    # Convert roll and pitch angles to radians
    roll = np.radians(df['Roll'].values)
    pitch = np.radians(df['Pitch'].values)

    # Calculate the incline angle (theta) using roll and pitch
    df['incline_angle'] = np.arctan(np.sqrt(np.tan(roll)**2 + np.tan(pitch)**2))

    # Filter data for positive acceleration (vehicle is accelerating)
    df_accelerating = df[df['accel_magnitude'] > 0]

    # Estimate mass for each valid data point
    df_accelerating['mass_estimate'] = MOTOR_FORCE / (
        df_accelerating['accel_magnitude'] + 
        ROLLING_RESISTANCE_COEFFICIENT * GRAVITY + 
        GRAVITY * np.sin(df_accelerating['incline_angle'])
    )

    return df_accelerating

def main():
    # Specify the path to the data.txt file on the SD card
    data_file_path = 'D:/data.txt'  # Update this path to the actual location of your data.txt file

    # Specify the output directory (optional)
    output_directory = 'C:/Users/44753/Downloads/EAV_data/'  # Update this to your desired directory

    # Step 1: Run the text_to_excel script to process the data and save it to a CSV file
    process_data_file(data_file_path, output_directory)

    # Step 2: Load the CSV file generated by the text_to_excel script
    current_date = datetime.now().strftime('%Y-%m-%d')
    csv_file_path = os.path.join(output_directory, f'{current_date}.csv')
    df = pd.read_csv(csv_file_path)

    # Step 3: Normalize the acceleration data
    df = normalize_acceleration(df)

    # Step 4: Estimate the mass of the vehicle
    df_accelerating = estimate_mass(df)

    # Step 5: Calculate the median mass estimate
    final_mass_estimate = df_accelerating['mass_estimate'].median()

    # Step 6: Plot the mass estimates over time
    plt.figure(figsize=(10, 6))
    plt.plot(df_accelerating['Time'], df_accelerating['mass_estimate'], 'bo', label='Mass Estimate')
    plt.axhline(final_mass_estimate, color='r', linestyle='--', label=f'Final Mass Estimate: {final_mass_estimate:.2f} kg')
    plt.xlabel('Time (s)')
    plt.ylabel('Mass Estimate (kg)')
    plt.title('Mass Estimation Over Time (Incline Considered)')
    plt.legend()
    plt.grid(True)
    plt.show()

    # Step 7: Print the final mass estimate
    print(f"Final Mass Estimate: {final_mass_estimate:.2f} kg")

if __name__ == "__main__":
    main()